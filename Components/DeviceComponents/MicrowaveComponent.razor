@using HomeController.Models
@using System.Text.Json

<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="timer-section">
            <label for="timer-controls">Timer:</label>
            <div class="timer-controls">
                <div class="timer-input-group">
                    <div class="timer-input-wrapper">
                        <input type="number" id="timer-minutes" min="0" max="59" @bind="device.Timer" />
                        <span class="timer-label">min</span>
                    </div>
                    <div class="timer-separator">:</div>
                    <div class="timer-input-wrapper">
                        <input type="number" id="timer-seconds" min="0" max="59" @bind="device.Timer" />
                        <span class="timer-label">sec</span>
                    </div>
                </div>
                <div class="timer-display">
                    @if (device.Timer != TimeSpan.Zero)
                    {
                        <span class="timer-value">@device.Timer.ToString(@"mm\:ss")</span>
                    }
                    else
                    {
                        <span class="timer-value">00:00</span>
                    }
                </div>
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Stop</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Start</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public Microwave? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.Timer = state.TryGetProperty("Timer", out JsonElement timer) && timer.ValueKind == JsonValueKind.Number
                    ? TimeSpan.FromSeconds(timer.GetDouble())
                    : TimeSpan.Zero;
                }
            }
            catch (JsonException)
            {
                device.Timer = TimeSpan.Zero;
            }
        }
        else
        {
            device.Timer = TimeSpan.Zero;
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            timer = device.Timer,
        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}