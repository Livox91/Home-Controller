@using System.Text.Json
@using HomeController.Models;

<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="temperature-section">
            <label for="target-temp-slider">Target Temperature: @device.TargetTemperature°C</label>
            <div class="slider-container">
                <input type="range" id="target-temp-slider" min="20" max="80" @bind="device.TargetTemperature" />
            </div>
            <div class="temperature-value">Target: @device.TargetTemperature°C</div>
        </div>

        <div class="current-temp-section">
            <div class="current-temp-display">
                <span class="temp-label">Current Temperature</span>
                <span class="temp-value">@device.CurrentTemperature°C</span>
            </div>
            <div class="last-updated">
                Last Updated: @device.LastUpdated
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Turn Off</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Turn On</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public WaterHeater? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.CurrentTemperature = state.TryGetProperty("CurrentTemperature", out JsonElement ct) && ct.TryGetInt32(out int
                    currentTemp)
                    ? currentTemp : 45;

                    device.TargetTemperature = state.TryGetProperty("TargetTemperature", out JsonElement tt) && tt.TryGetInt32(out int
                    targetTemp)
                    ? targetTemp : 55;

                    device.LastUpdated = state.TryGetProperty("LastUpdated", out JsonElement lu)
                    ? lu.GetString() ?? "2025-05-25 14:30" : "2025-05-25 14:30";
                }
            }
            catch (JsonException)
            {
                device.CurrentTemperature = 45;
                device.TargetTemperature = 55;
                device.LastUpdated = "2025-05-25 14:30";
            }
        }
        else
        {
            device.CurrentTemperature = 45;
            device.TargetTemperature = 55;
            device.LastUpdated = "2025-05-25 14:30";
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            currentTemperature = device.CurrentTemperature,
            targetTemperature = device.TargetTemperature,
            lastUpdated = DateTime.Now.ToString("yyyy-MM-dd HH:mm")
        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}