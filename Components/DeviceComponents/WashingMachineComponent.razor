@using HomeController.Models
@using System.Text.Json


<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="cycle-section">
            <label for="cycle-selector">Wash Cycle:</label>
            <select id="cycle-selector" @bind="device.CurrentCycle" class="cycle-dropdown">
                <option value="0">Select Cycle</option>
                <option value="1">Quick Wash (30 min)</option>
                <option value="2">Normal (60 min)</option>
                <option value="3">Heavy Duty (90 min)</option>
                <option value="4">Eco Mode (120 min)</option>
            </select>
        </div>

        <div class="water-level-section">
            <label for="water-level-slider">Water Level: @device.WaterLevel%</label>
            <div class="slider-container">
                <input type="range" id="water-level-slider" min="0" max="100" @bind="device.WaterLevel" />
            </div>
            <div class="water-level-value">Level: @device.WaterLevel%</div>
        </div>

        <div class="status-section">
            <div class="status-grid">
                <div class="status-item">
                    <span class="status-label">Start Time</span>
                    <span class="status-value">@(device.StartTime.ToString() ?? "Not Set")</span>
                </div>
                <div class="status-item">
                    <span class="status-label">End Time</span>
                    <span class="status-value">@(device.EndTime.ToString() ?? "Not Set")</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Total Cycles</span>
                    <span class="status-value">@device.TotalCycles</span>
                </div>
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Stop</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Start</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public WashingMachine? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.CurrentCycle = state.TryGetProperty("CurrentCycle", out JsonElement ct) && ct.TryGetInt32(out int
                    CurrentCycle)
                    ? CurrentCycle : 45;

                    device.StartTime = state.TryGetProperty("StartTime", out JsonElement st)
                    && st.ValueKind == JsonValueKind.String
                    && long.TryParse(st.GetString(), out long startTime)
                    ? DateTimeOffset.FromUnixTimeSeconds(startTime).DateTime
                    : DateTime.MinValue;

                    device.EndTime = state.TryGetProperty("EndTime", out JsonElement et)
                    && et.ValueKind == JsonValueKind.String
                    && long.TryParse(et.GetString(), out long endTime)
                    ? DateTimeOffset.FromUnixTimeSeconds(endTime).DateTime
                    : DateTime.MinValue;

                    device.WaterLevel = state.TryGetProperty("WaterLevel", out JsonElement wl) && wl.TryGetInt32(out int
                    waterLevel)
                    ? waterLevel : 0;
                    device.TotalCycles = state.TryGetProperty("TotalCycles", out JsonElement tc) && tc.TryGetInt32(out int
                    totalCycles)
                    ? totalCycles : 0;
                }
            }
            catch (JsonException)
            {
                device.CurrentCycle = 0;
                device.StartTime = null;
                device.EndTime = null;
                device.WaterLevel = 0;
                device.TotalCycles = 0;
            }
        }
        else
        {
            device.CurrentCycle = 0;
            device.StartTime = null;
            device.EndTime = null;
            device.WaterLevel = 0;
            device.TotalCycles = 0;
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            currentCycle = device.CurrentCycle,
            startTime = device.StartTime,
            endTime = device.EndTime,
            waterLevel = device.WaterLevel,
            totalCycles = device.TotalCycles,
        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}