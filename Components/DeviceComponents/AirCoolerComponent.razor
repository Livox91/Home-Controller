@using System.Text.Json
@using HomeController.Models;

<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="temperature-section">
            <label for="ac-temp-slider">Temperature: @device.Temperature°C</label>
            <div class="slider-container">
                <input type="range" id="ac-temp-slider" min="16" max="30" @bind="device.Temperature" />
            </div>
            <div class="temperature-value">Set to: @device.Temperature°C</div>
        </div>

        <div class="fan-speed-section">
            <label>Fan Speed: @device.FanSpeed</label>
            <div class="fan-speed-controls">
                <button class="fan-button @(device.FanSpeed == 1 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(1)">
                    <span class="fan-icon">◐</span>
                    <span class="fan-label">Low</span>
                </button>
                <button class="fan-button @(device.FanSpeed == 2 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(2)">
                    <span class="fan-icon">◑</span>
                    <span class="fan-label">Medium</span>
                </button>
                <button class="fan-button @(device.FanSpeed == 3 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(3)">
                    <span class="fan-icon">●</span>
                    <span class="fan-label">High</span>
                </button>
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Turn Off</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Turn On</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public AirCooler? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.FanSpeed = state.TryGetProperty("FanSpeed", out JsonElement ct) && ct.TryGetInt32(out int
                    currentTemp)
                    ? currentTemp : 45;

                    device.Temperature = state.TryGetProperty("Temperature", out JsonElement tt) && tt.TryGetInt32(out int
                    targetTemp)
                    ? targetTemp : 55;


                }
            }
            catch (JsonException)
            {
                device.FanSpeed = 2;
                device.Temperature = 27;
            }
        }
        else
        {
            device.FanSpeed = 2;
            device.Temperature = 27;
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            fanSpeed = device.FanSpeed,
            temperature = device.Temperature,
        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}