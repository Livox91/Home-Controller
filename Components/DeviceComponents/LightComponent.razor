@using System.Text.Json;
@using HomeController.Models;

<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="brightness-section">
            <label for="brightness-slider">Brightness:</label>
            <input type="range" id="brightness-slider" min="0" max="100" @bind="device.Brightness" />
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">TurnOff</button>
            }
            else
            {
                <button @onclick="OnTurnOn">TurnOn</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string responseBody { get; set; }

    [Parameter]
    public Light? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }


    protected override void OnInitialized()
    {

        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.Brightness = state.TryGetProperty("Brightness", out JsonElement ct) && ct.TryGetInt32(out int Brightness) ?
                    Brightness :
                    2;
                }
            }
            catch (JsonException)
            {
                device.Brightness = 2;

            }
        }
        else
        {
            device.Brightness = 2;

        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new { action = "set", brightness = device.Brightness };
        string brightnessJson = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(brightnessJson);
    }

}
