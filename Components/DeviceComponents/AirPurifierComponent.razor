@using HomeController.Models
@using System.Text.Json


<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="fan-speed-section">
            <label>Fan Speed: @device.FanSpeed</label>
            <div class="fan-speed-controls">
                <button class="fan-button @(device.FanSpeed == 0 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(0)">
                    <span class="fan-icon">○</span>
                    <span class="fan-label">Off</span>
                </button>
                <button class="fan-button @(device.FanSpeed == 1 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(1)">
                    <span class="fan-icon">◐</span>
                    <span class="fan-label">Low</span>
                </button>
                <button class="fan-button @(device.FanSpeed == 2 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(2)">
                    <span class="fan-icon">◑</span>
                    <span class="fan-label">Medium</span>
                </button>
                <button class="fan-button @(device.FanSpeed == 3 ? "active" : "")"
                    @onclick="() => device.SetFanSpeed(3)">
                    <span class="fan-icon">●</span>
                    <span class="fan-label">High</span>
                </button>
            </div>
        </div>

        <div class="air-quality-section">
            <div class="air-quality-display">
                <span class="quality-label">Air Quality Index</span>
                <div class="quality-value-container">
                    <span class="quality-value">@device.AirQuality.ToString("F2")</span>
                    @* <span
                        class="quality-status @GetAirQualityClass(device.AirQuality)">@GetAirQualityStatus(device.AirQuality)</span> *@
                </div>
                <div class="quality-bar">
                    <div class="quality-progress" style="width: @(Math.Min(device.AirQuality * 10, 100))%"></div>
                </div>
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Turn Off</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Turn On</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public AirPurifier? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.FanSpeed = state.TryGetProperty("FanSpeed", out JsonElement fanSpeed) ? fanSpeed.GetInt32() : 0;
                    device.AirQuality = state.TryGetProperty("AirQuality", out JsonElement airQuality) ? airQuality.GetDouble() : 0.00;
                }
            }
            catch (JsonException)
            {
                device.FanSpeed = 0;
                device.AirQuality = 0.00;
            }
        }
        else
        {

            device.FanSpeed = 0;
            device.AirQuality = 0.00;
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            fanSpeed = device.FanSpeed,
            airQuality = device.AirQuality,

        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}