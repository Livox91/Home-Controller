@using HomeController.Models
@using System.Text.Json

<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="volume-section">
            <label for="volume-slider">Volume: @device.VolumeLevel</label>
            <div class="slider-container">
                <input type="range" id="volume-slider" min="0" max="100" @bind="device.VolumeLevel" />
            </div>
            <div class="volume-value">Level: @device.VolumeLevel%</div>
        </div>

        <div class="input-source-section">
            <label>Input Source: @device.InputSource</label>
            <div class="input-source-controls">
                <button class="input-button @(device.InputSource == "HDMI1" ? "active" : "")"
                    @onclick='() => device.SetInputSource("HDMI1")'>
                    <span class="input-icon">ðŸ“º</span>
                    <span class="input-label">HDMI 1</span>
                </button>
                <button class="input-button @(device.InputSource == "HDMI2" ? "active" : "")"
                    @onclick='() => device.SetInputSource("HDMI2")'>
                    <span class="input-icon">ðŸŽ®</span>
                    <span class="input-label">HDMI 2</span>
                </button>
                <button class="input-button @(device.InputSource == "HDMI3" ? "active" : "")"
                    @onclick='() => device.SetInputSource("HDMI3")'>
                    <span class="input-icon">ðŸ’»</span>
                    <span class="input-label">HDMI 3</span>
                </button>
                <button class="input-button @(device.InputSource == "USB" ? "active" : "")"
                    @onclick='() => device.SetInputSource("USB")'>
                    <span class="input-icon">ðŸ”Œ</span>
                    <span class="input-label">USB</span>
                </button>
                <button class="input-button @(device.InputSource == "Bluetooth" ? "active" : "")"
                    @onclick='() => device.SetInputSource("Bluetooth")'>
                    <span class="input-icon">ðŸ“¶</span>
                    <span class="input-label">Bluetooth</span>
                </button>
                <button class="input-button @(device.InputSource == "AUX" ? "active" : "")"
                    @onclick='() => device.SetInputSource("AUX")'>
                    <span class="input-icon">ðŸŽµ</span>
                    <span class="input-label">AUX</span>
                </button>
            </div>
        </div>

        <div class="button-section">
            @if (device.deviceStatus == "Running")
            {
                <button @onclick="OnTurnOff">Turn Off</button>
            }
            else
            {
                <button @onclick="OnTurnOn">Turn On</button>
            }
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string responseBody { get; set; } = "";

    [Parameter]
    public HomeTheater? device { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClicked { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(responseBody))
        {
            try
            {
                using JsonDocument doc = JsonDocument.Parse(responseBody);
                JsonElement root = doc.RootElement;

                if (root.TryGetProperty("state", out JsonElement state))
                {
                    device.VolumeLevel = state.TryGetProperty("VolumeLevel", out JsonElement vl) && vl.TryGetInt32(out int volume)
                    ? volume : 50;
                    device.InputSource = state.TryGetProperty("InputSource", out JsonElement isrc) && isrc.ValueKind == JsonValueKind.String
                    ? isrc.GetString() : "HDMI1";
                }
            }
            catch (JsonException)
            {
                device.VolumeLevel = 0;
                device.InputSource = "HDMI1";
            }
        }
        else
        {
            device.VolumeLevel = 0;
            device.InputSource = "HDMI1";
        }
    }
    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }
    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }
    private async Task OnSave()
    {
        var obj = new
        {
            action = "set",
            volumeLevel = device.VolumeLevel,
            inputSource = device.InputSource
        };
        string Json = JsonSerializer.Serialize(obj);
        await OnSaveClicked.InvokeAsync(Json);
    }

}