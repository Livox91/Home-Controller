@rendermode InteractiveServer

@inject HomeController.Services.DeviceService DeviceService


<div class="device-form">
    <div class="form-group">
        <label>Device Name</label>
        <input type="text" @bind="DeviceName" />
    </div>

    <div class="form-group">
        <label>Device Type</label>
        <div class="dropdown">
            <div class="dropdown-header" @onclick="() => ToggleDeviceTypeDropdown()">
                <span>@(SelectedDeviceType ?? "")</span>
                <span class="dropdown-icon">@(ShowDeviceTypeDropdown ? "▲" : "▼")</span>
            </div>
            @if (ShowDeviceTypeDropdown)
            {
                <div class="dropdown-menu">
                    @foreach (var type in DeviceTypes)
                    {
                        <div class="dropdown-item" @onclick="() => SelectDeviceType(type)">
                            @type
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="form-group">
        <label>Room</label>
        <div class="dropdown">
            <div class="dropdown-header" @onclick="() => ToggleRoomDropdown()">
                <span>@(SelectedRoom ?? "")</span>
                <span class="dropdown-icon">@(ShowRoomDropdown ? "▲" : "▼")</span>
            </div>
            @if (ShowRoomDropdown)
            {
                <div class="dropdown-menu">
                    @foreach (var room in Rooms)
                    {
                        <div class="dropdown-item" @onclick="() => SelectRoom(room)">
                            @room
                        </div>
                    }
                </div>
            }
        </div>

        <button @onclick="() => AddDevice()"> Add </button>
    </div>
</div>

<style>
    .device-form {
        using HomeController.Services;
        width: 400px;
        background-color: #d9d9d9;
        padding: 20px;
        margin: auto;
    }

    .form-group {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .form-group label {
        font-size: 14px;
        color: #333;
    }

    .form-group input,
    .dropdown-header {
        width: 200px;
        height: 30px;
        background-color: #1e1e1e;
        color: white;
        border: none;
        padding: 5px 10px;
        box-sizing: border-box;
    }

    .dropdown {
        position: relative;
        width: 200px;
    }

    .dropdown-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
    }

    .dropdown-menu {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: #333;
        color: white;
        z-index: 1000;
        display: block;
        /* Add this to ensure it's displayed as a block element */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        /* Optional: adds a shadow to make it visible */
    }

    .dropdown-item {
        color: white;
        padding: 8px 10px;
        cursor: pointer;
    }

    .dropdown-item:hover {
        background-color: #444;
    }
</style>

@code {

    private async Task onInitializedAsync()
    {

    }
    private string DeviceName { get; set; } = string.Empty;
    private string SelectedDeviceType { get; set; }
    private string SelectedRoom { get; set; }
    private bool ShowDeviceTypeDropdown { get; set; }
    private bool ShowRoomDropdown { get; set; }

    private List<string> DeviceTypes { get; set; } = new List<string>
{
"light",
"fan",
"aC"
};

    private List<string> Rooms { get; set; } = new List<string>
{
"Living Room",
"Bedroom",
"Kitchen",
"Bathroom"
};

    private void ToggleDeviceTypeDropdown()
    {
        ShowDeviceTypeDropdown = !ShowDeviceTypeDropdown;
        if (ShowDeviceTypeDropdown)
            ShowRoomDropdown = false;
    }

    private void ToggleRoomDropdown()
    {
        ShowRoomDropdown = !ShowRoomDropdown;
        if (ShowRoomDropdown)
            ShowDeviceTypeDropdown = false;
    }

    private void SelectDeviceType(string deviceType)
    {
        SelectedDeviceType = deviceType;
        ShowDeviceTypeDropdown = false;
    }

    private void SelectRoom(string room)
    {
        SelectedRoom = room;
        ShowRoomDropdown = false;
    }

    public async void AddDevice()
    {
        if (!string.IsNullOrWhiteSpace(DeviceName) && !string.IsNullOrWhiteSpace(SelectedDeviceType) &&
        !string.IsNullOrWhiteSpace(SelectedRoom))
        {
            await DeviceService.CreateDevice(SelectedDeviceType, DeviceName, SelectedRoom);

            // Reset the form
            DeviceName = string.Empty;
            SelectedDeviceType = string.Empty;
            SelectedRoom = string.Empty;
        }
    }

}