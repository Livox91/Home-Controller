@rendermode InteractiveServer

@inject HomeController.Services.DeviceService DeviceService
@inject HomeController.Services.RoomService RoomService

<div class="device-form">
    <div class="form-group">
        <label>Device Name</label>
        <input type="text" @bind="DeviceName" />
    </div>

    <div class="form-group">
        <label>Device Type</label>
        <div class="dropdown">
            <div class="dropdown-header" @onclick="() => ToggleDeviceTypeDropdown()">
                <span>@(SelectedDeviceType ?? "")</span>
                <span class="dropdown-icon">@(ShowDeviceTypeDropdown ? "▲" : "▼")</span>
            </div>
            @if (ShowDeviceTypeDropdown)
            {
                <div class="dropdown-menu">
                    @foreach (var type in DeviceTypes)
                    {
                        <div class="dropdown-item" @onclick="() => SelectDeviceType(type)">
                            @type
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="form-group">
        <label>Room</label>
        <div class="dropdown">
            <div class="dropdown-header" @onclick="() => ToggleRoomDropdown()">
                <span>@(SelectedRoom ?? "")</span>
                <span class="dropdown-icon">@(ShowRoomDropdown ? "▲" : "▼")</span>
            </div>
            @if (ShowRoomDropdown)
            {
                <div class="dropdown-menu">
                    @foreach (var room in Rooms)
                    {
                        <div class="dropdown-item" @onclick="() => SelectRoom(room)">
                            @room
                        </div>
                    }
                </div>
            }
        </div>

        <button @onclick="() => AddDevice()"> Add </button>
    </div>
</div>

@code {
    private string DeviceName { get; set; } = string.Empty;
    private string SelectedDeviceType { get; set; }
    private string SelectedRoom { get; set; }

    private bool ShowDeviceTypeDropdown { get; set; }
    private bool ShowRoomDropdown { get; set; }

    public List<string> DeviceTypes { get; set; } = new List<string>
{
"Light", "Fan", "AirCooler", "AirPurifier",
"Television","WashingMachine","Microwave","WaterHeater","DishWasher","HomeTheater"
};
    [Parameter]
    public EventCallback onChanged { get; set; }

    public List<string> Rooms { get; set; }

    protected override void OnInitialized()
    {
        Rooms = RoomService.GetRooms();

    }
    private void ToggleDeviceTypeDropdown()
    {
        ShowDeviceTypeDropdown = !ShowDeviceTypeDropdown;
        if (ShowDeviceTypeDropdown)
            ShowRoomDropdown = false;
    }

    private void ToggleRoomDropdown()
    {
        ShowRoomDropdown = !ShowRoomDropdown;
        if (ShowRoomDropdown)
            ShowDeviceTypeDropdown = false;
    }

    private void SelectDeviceType(string deviceType)
    {
        SelectedDeviceType = deviceType;
        ShowDeviceTypeDropdown = false;
    }

    private void SelectRoom(string room)
    {
        SelectedRoom = room;
        ShowRoomDropdown = false;
    }

    private bool DeviceExists(string deviceName, string deviceType, string room)
    {
        var devices = DeviceService.GetDevices();
        foreach (var device in devices)
        {
            if (device.deviceName.Equals(deviceName, StringComparison.OrdinalIgnoreCase) &&
            device.deviceType.Equals(deviceType, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }
        return false;
    }
    public async void AddDevice()
    {
        if (DeviceExists(DeviceName, SelectedDeviceType, SelectedRoom))
        {
            Console.WriteLine("Device already exists.");
            return;
        }
        if (!string.IsNullOrWhiteSpace(DeviceName) && !string.IsNullOrWhiteSpace(SelectedDeviceType) &&
        !string.IsNullOrWhiteSpace(SelectedRoom))
        {
            await DeviceService.CreateDevice(SelectedDeviceType.ToLower(), DeviceName, SelectedRoom);

            DeviceName = string.Empty;
            SelectedDeviceType = string.Empty;
            SelectedRoom = string.Empty;
        }
        await onChanged.InvokeAsync();
    }

}