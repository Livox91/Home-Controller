// BrightnessControlPopup.razor
<div class="popup-overlay" @onclick="ClosePopup">
    <div class="popup-content" @onclick:stopPropagation>
        <div class="brightness-section">
            <label for="brightness-slider">Brightness:</label>
            <input type="range" id="brightness-slider" min="0" max="100" @bind="CurrentBrightness" />
        </div>

        <div class="button-section">
            <button @onclick="OnTurnOn">TurnOn</button>
            <button @onclick="OnTurnOff">TurnOff</button>
            <button @onclick="OnDelete">Delete</button>
            <button @onclick="OnSave">Save</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnTurnOnClicked { get; set; }

    [Parameter]
    public EventCallback OnTurnOffClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }


    public EventCallback OnSaveClicked { get; set; }

    private int _currentBrightness = 50; // Initial value for the slider

    [Parameter]
    public int CurrentBrightness
    {
        get => _currentBrightness;
        set
        {
            if (_currentBrightness != value)
            {
                _currentBrightness = value;
                // You can add logic here to notify parent or perform actions when brightness changes
                // For example, if you want to expose a BrightnessChanged event:
                // BrightnessChanged.InvokeAsync(value);
            }
        }
    }

    private async Task ClosePopup()
    {
        await OnClose.InvokeAsync(null);
    }

    private async Task OnTurnOn()
    {
        await OnTurnOnClicked.InvokeAsync(null);
    }

    private async Task OnTurnOff()
    {
        await OnTurnOffClicked.InvokeAsync(null);
    }

    private async Task OnDelete()
    {
        await OnDeleteClicked.InvokeAsync(null);
    }

    private async Task OnSave()
    {
        await OnSaveClicked.InvokeAsync(null);
    }
}
